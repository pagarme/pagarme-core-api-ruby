# pagarme_core_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
require_relative 'get_transaction_response'

module PagarmeCoreApi
  # Response object for getting a boleto transaction
  class GetBoletoTransactionResponse < GetTransactionResponse
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :barcode

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nosso_numero

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :bank

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :document_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :instructions

    # TODO: Write general description for this method
    # @return [GetBillingAddressResponse]
    attr_accessor :billing_address

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :due_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :qr_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :line

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pdf_password

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pdf

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :paid_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :paid_amount

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :credit_at

    # Soft Descriptor
    # @return [String]
    attr_accessor :statement_descriptor

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['url'] = 'url'
      @_hash['barcode'] = 'barcode'
      @_hash['nosso_numero'] = 'nosso_numero'
      @_hash['bank'] = 'bank'
      @_hash['document_number'] = 'document_number'
      @_hash['instructions'] = 'instructions'
      @_hash['billing_address'] = 'billing_address'
      @_hash['due_at'] = 'due_at'
      @_hash['qr_code'] = 'qr_code'
      @_hash['line'] = 'line'
      @_hash['pdf_password'] = 'pdf_password'
      @_hash['pdf'] = 'pdf'
      @_hash['paid_at'] = 'paid_at'
      @_hash['paid_amount'] = 'paid_amount'
      @_hash['type'] = 'type'
      @_hash['credit_at'] = 'credit_at'
      @_hash['statement_descriptor'] = 'statement_descriptor'
      @_hash = super().merge(@_hash)
      @_hash
    end

    # An array for optional fields
    def optionals
      _arr = %w[
        due_at
        paid_at
        credit_at
      ]
      (_arr << super()).flatten!
    end

    # An array for nullable fields
    def nullables
      _arr = []
      (_arr << super()).flatten!
    end

    def initialize(url = nil,
                   barcode = nil,
                   nosso_numero = nil,
                   bank = nil,
                   document_number = nil,
                   instructions = nil,
                   billing_address = nil,
                   qr_code = nil,
                   line = nil,
                   pdf_password = nil,
                   pdf = nil,
                   paid_amount = nil,
                   type = nil,
                   statement_descriptor = nil,
                   gateway_id = nil,
                   amount = nil,
                   status = nil,
                   success = nil,
                   created_at = nil,
                   updated_at = nil,
                   attempt_count = nil,
                   max_attempts = nil,
                   splits = nil,
                   id = nil,
                   gateway_response = nil,
                   antifraud_response = nil,
                   split = nil,
                   due_at = nil,
                   paid_at = nil,
                   credit_at = nil,
                   next_attempt = nil,
                   transaction_type = 'boleto',
                   metadata = nil)
      @url = url unless url == SKIP
      @barcode = barcode unless barcode == SKIP
      @nosso_numero = nosso_numero unless nosso_numero == SKIP
      @bank = bank unless bank == SKIP
      @document_number = document_number unless document_number == SKIP
      @instructions = instructions unless instructions == SKIP
      @billing_address = billing_address unless billing_address == SKIP
      @due_at = due_at unless due_at == SKIP
      @qr_code = qr_code unless qr_code == SKIP
      @line = line unless line == SKIP
      @pdf_password = pdf_password unless pdf_password == SKIP
      @pdf = pdf unless pdf == SKIP
      @paid_at = paid_at unless paid_at == SKIP
      @paid_amount = paid_amount unless paid_amount == SKIP
      @type = type unless type == SKIP
      @credit_at = credit_at unless credit_at == SKIP
      @statement_descriptor = statement_descriptor unless statement_descriptor == SKIP

      # Call the constructor of the base class
      super(gateway_id,
            amount,
            status,
            success,
            created_at,
            updated_at,
            attempt_count,
            max_attempts,
            splits,
            id,
            gateway_response,
            antifraud_response,
            split,
            next_attempt,
            transaction_type,
            metadata)
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      url = hash.key?('url') ? hash['url'] : SKIP
      barcode = hash.key?('barcode') ? hash['barcode'] : SKIP
      nosso_numero = hash.key?('nosso_numero') ? hash['nosso_numero'] : SKIP
      bank = hash.key?('bank') ? hash['bank'] : SKIP
      document_number =
        hash.key?('document_number') ? hash['document_number'] : SKIP
      instructions = hash.key?('instructions') ? hash['instructions'] : SKIP
      billing_address = GetBillingAddressResponse.from_hash(hash['billing_address']) if
        hash['billing_address']
      qr_code = hash.key?('qr_code') ? hash['qr_code'] : SKIP
      line = hash.key?('line') ? hash['line'] : SKIP
      pdf_password = hash.key?('pdf_password') ? hash['pdf_password'] : SKIP
      pdf = hash.key?('pdf') ? hash['pdf'] : SKIP
      paid_amount = hash.key?('paid_amount') ? hash['paid_amount'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      statement_descriptor =
        hash.key?('statement_descriptor') ? hash['statement_descriptor'] : SKIP
      gateway_id = hash.key?('gateway_id') ? hash['gateway_id'] : SKIP
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      status = hash.key?('status') ? hash['status'] : SKIP
      success = hash.key?('success') ? hash['success'] : SKIP
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   else
                     SKIP
                   end
      updated_at = if hash.key?('updated_at')
                     (DateTimeHelper.from_rfc3339(hash['updated_at']) if hash['updated_at'])
                   else
                     SKIP
                   end
      attempt_count = hash.key?('attempt_count') ? hash['attempt_count'] : SKIP
      max_attempts = hash.key?('max_attempts') ? hash['max_attempts'] : SKIP
      # Parameter is an array, so we need to iterate through it
      splits = nil
      unless hash['splits'].nil?
        splits = []
        hash['splits'].each do |structure|
          splits << (GetSplitResponse.from_hash(structure) if structure)
        end
      end

      splits = SKIP unless hash.key?('splits')
      id = hash.key?('id') ? hash['id'] : SKIP
      gateway_response = GetGatewayResponseResponse.from_hash(hash['gateway_response']) if
        hash['gateway_response']
      antifraud_response = GetAntifraudResponse.from_hash(hash['antifraud_response']) if
        hash['antifraud_response']
      # Parameter is an array, so we need to iterate through it
      split = nil
      unless hash['split'].nil?
        split = []
        hash['split'].each do |structure|
          split << (GetSplitResponse.from_hash(structure) if structure)
        end
      end

      split = SKIP unless hash.key?('split')
      due_at = if hash.key?('due_at')
                 (DateTimeHelper.from_rfc3339(hash['due_at']) if hash['due_at'])
               else
                 SKIP
               end
      paid_at = if hash.key?('paid_at')
                  (DateTimeHelper.from_rfc3339(hash['paid_at']) if hash['paid_at'])
                else
                  SKIP
                end
      credit_at = if hash.key?('credit_at')
                    (DateTimeHelper.from_rfc3339(hash['credit_at']) if hash['credit_at'])
                  else
                    SKIP
                  end
      next_attempt = if hash.key?('next_attempt')
                       (DateTimeHelper.from_rfc3339(hash['next_attempt']) if hash['next_attempt'])
                     else
                       SKIP
                     end
      transaction_type = hash['transaction_type'] ||= 'boleto'
      metadata = hash.key?('metadata') ? hash['metadata'] : SKIP

      # Create object from extracted values.
      GetBoletoTransactionResponse.new(url,
                                       barcode,
                                       nosso_numero,
                                       bank,
                                       document_number,
                                       instructions,
                                       billing_address,
                                       qr_code,
                                       line,
                                       pdf_password,
                                       pdf,
                                       paid_amount,
                                       type,
                                       statement_descriptor,
                                       gateway_id,
                                       amount,
                                       status,
                                       success,
                                       created_at,
                                       updated_at,
                                       attempt_count,
                                       max_attempts,
                                       splits,
                                       id,
                                       gateway_response,
                                       antifraud_response,
                                       split,
                                       due_at,
                                       paid_at,
                                       credit_at,
                                       next_attempt,
                                       transaction_type,
                                       metadata)
    end

    def to_due_at
      DateTimeHelper.to_rfc3339(due_at)
    end

    def to_paid_at
      DateTimeHelper.to_rfc3339(paid_at)
    end

    def to_credit_at
      DateTimeHelper.to_rfc3339(credit_at)
    end
  end
end
