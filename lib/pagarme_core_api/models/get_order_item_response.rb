# pagarme_core_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PagarmeCoreApi
  # Response object for getting an order item
  class GetOrderItemResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Id
    # @return [String]
    attr_accessor :id

    # Id
    # @return [Integer]
    attr_accessor :amount

    # Id
    # @return [String]
    attr_accessor :description

    # Id
    # @return [Integer]
    attr_accessor :quantity

    # Seller data
    # @return [GetSellerResponse]
    attr_accessor :get_seller_response

    # Category
    # @return [String]
    attr_accessor :category

    # Code
    # @return [String]
    attr_accessor :code

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['amount'] = 'amount'
      @_hash['description'] = 'description'
      @_hash['quantity'] = 'quantity'
      @_hash['get_seller_response'] = 'GetSellerResponse'
      @_hash['category'] = 'category'
      @_hash['code'] = 'code'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        get_seller_response
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(id = nil,
                   amount = nil,
                   description = nil,
                   quantity = nil,
                   category = nil,
                   code = nil,
                   get_seller_response = nil)
      @id = id unless id == SKIP
      @amount = amount unless amount == SKIP
      @description = description unless description == SKIP
      @quantity = quantity unless quantity == SKIP
      @get_seller_response = get_seller_response unless get_seller_response == SKIP
      @category = category unless category == SKIP
      @code = code unless code == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      amount = hash.key?('amount') ? hash['amount'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      category = hash.key?('category') ? hash['category'] : SKIP
      code = hash.key?('code') ? hash['code'] : SKIP
      get_seller_response = GetSellerResponse.from_hash(hash['GetSellerResponse']) if
        hash['GetSellerResponse']

      # Create object from extracted values.
      GetOrderItemResponse.new(id,
                               amount,
                               description,
                               quantity,
                               category,
                               code,
                               get_seller_response)
    end
  end
end
